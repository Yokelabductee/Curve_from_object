import bpy

# Set frame range
bpy.context.scene.frame_start = 1
bpy.context.scene.frame_end = 120

# Get the active object
obj = bpy.context.active_object

# Create a new curve object
curve = bpy.data.curves.new('curve', 'CURVE')
curve.dimensions = '3D'
spline = curve.splines.new('BEZIER')

# Iterate through the frames
for frame in range(bpy.context.scene.frame_start, bpy.context.scene.frame_end+1):

    # Set the current frame
    bpy.context.scene.frame_set(frame)
    
    # Get the location of the empty at the current frame
    loc = obj.matrix_world.translation
    
    # Add a new point to the curve
    spline.bezier_points.add(1)
    point = spline.bezier_points[-1]
    point.co = loc
    point.handle_left_type = 'AUTO'
    point.handle_right_type = 'AUTO'
    
# Create a new object from the curve
curve_object = bpy.data.objects.new('curve_object', curve)
bpy.context.scene.collection.objects.link(curve_object)

# Go to frame 1
bpy.context.scene.frame_set(1)

# Make the curve active
bpy.context.view_layer.objects.active = curve_object

# Set origin to 3D cursor
bpy.ops.object.origin_set(type='ORIGIN_CURSOR')

# Make the curve active and go to edit mode
bpy.context.view_layer.objects.active = curve_object
bpy.ops.object.mode_set(mode='EDIT')

# Deselect all control points and select the first vertex
for point in curve_object.data.splines.active.bezier_points:
    point.select_control_point = False
curve_object.data.splines.active.bezier_points[0].select_control_point = True

# Delete the first vertex
bpy.ops.curve.delete(type='VERT')

# Go back to object mode
bpy.ops.object.mode_set(mode='OBJECT')
